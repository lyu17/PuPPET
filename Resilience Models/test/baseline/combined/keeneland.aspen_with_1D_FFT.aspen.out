
------------------- Syntax Trees ---------------------

----- Main Machine Model -----
Machine model:
   Globals:
      Identifier klNodes = 
         Int: 120
      Identifier klJoulesPerByte = 
         Binary Op *
            LHS
               Int: 20
            RHS
               Real: 1e-09
      Identifier ddr3MemClock = 
         Binary Op *
            LHS
               Int: 1066
            RHS
               Real: 1e+06
      Identifier ddr3Cap = 
         Binary Op *
            LHS
               Int: 12
            RHS
               Real: 1e+09
      Identifier ddr3Channels = 
         Int: 3
      Identifier ddr3BW = 
         Binary Op *
            LHS
               Binary Op *
                  LHS
                     Ident: ddr3MemClock
                  RHS
                     Ident: ddr3Channels
            RHS
               Int: 8
      Identifier ddr3Lat = 
         Binary Op /
            LHS
               Binary Op *
                  LHS
                     Int: 10
                  RHS
                     Real: 1e-09
            RHS
               Ident: wmSIMD
      Identifier qdrLatency = 
         Binary Op *
            LHS
               Real: 1.07
            RHS
               Real: 1e-06
      Identifier qdrBW = 
         Binary Op *
            LHS
               Int: 4
            RHS
               Real: 1e+09
      Identifier wmNumCores = 
         Int: 6
      Identifier wmCoreClock = 
         Binary Op *
            LHS
               Real: 2.8
            RHS
               Real: 1e+09
      Identifier wmIssueRate = 
         Binary Op *
            LHS
               Ident: wmCoreClock
            RHS
               Int: 2
      Identifier wmSIMD = 
         Int: 4
      Identifier wmCacheCap = 
         Binary Op *
            LHS
               Int: 12
            RHS
               Real: 1e+06
      Identifier wmCacheLat = 
         Binary Op *
            LHS
               Binary Op /
                  LHS
                     Int: 1
                  RHS
                     Ident: wmCoreClock
            RHS
               Int: 48
      Identifier wmCacheBW = 
         Binary Op *
            LHS
               Binary Op *
                  LHS
                     Ident: wmNumCores
                  RHS
                     Int: 96
            RHS
               Real: 1e+09
      Identifier wmTDP = 
         Int: 90
      Identifier wmIdle = 
         Int: 10
      Identifier fNumCores = 
         Int: 16
      Identifier fCoreClock = 
         Range:
            Default value:
               Binary Op *
                  LHS
                     Int: 1300
                  RHS
                     Real: 1e+06
            Minimum value:
               Binary Op *
                  LHS
                     Int: 100
                  RHS
                     Real: 1e+06
            Maximum value:
               Binary Op *
                  LHS
                     Int: 2000
                  RHS
                     Real: 1e+06
      Identifier fSIMD = 
         Int: 32
      Identifier gddr5Clock = 
         Range:
            Default value:
               Binary Op *
                  LHS
                     Int: 3700
                  RHS
                     Real: 1e+06
            Minimum value:
               Binary Op *
                  LHS
                     Int: 100
                  RHS
                     Real: 1e+06
            Maximum value:
               Binary Op *
                  LHS
                     Int: 4000
                  RHS
                     Real: 1e+06
      Identifier gddr5Width = 
         Int: 48
      Identifier eccPenalty = 
         Real: 0.75
      Identifier gddr5BW = 
         Binary Op *
            LHS
               Binary Op *
                  LHS
                     Ident: gddr5Clock
                  RHS
                     Ident: gddr5Width
            RHS
               Ident: eccPenalty
      Identifier gddr5Lat = 
         Binary Op /
            LHS
               Binary Op *
                  LHS
                     Int: 50
                  RHS
                     Real: 1e-09
            RHS
               Ident: fSIMD
      Identifier gddr5Cap = 
         Binary Op *
            LHS
               Int: 6
            RHS
               Real: 1e+09
      Identifier pcieBW = 
         Binary Op *
            LHS
               Int: 6
            RHS
               Real: 1e+09
      Identifier pcieLat = 
         Binary Op *
            LHS
               Int: 15
            RHS
               Real: 1e-06
      Identifier fIdle = 
         Int: 30
      Identifier fTDP = 
         Int: 250
   Components:
      Memory 'ddr3':
         Property 'capacity'=
            Ident: ddr3Cap
         Resource 'loads' (arg=numBytes) quantity=
            Binary Op +
               LHS
                  Ident: ddr3Lat
               RHS
                  Binary Op /
                     LHS
                        Ident: numBytes
                     RHS
                        Ident: ddr3BW
            Trait 'stride': quantity=
                  Binary Op *
                     LHS
                        Ident: base
                     RHS
                        Int: 2
            Trait 'random': quantity=
                  Binary Op *
                     LHS
                        Ident: base
                     RHS
                        Int: 8
            Static power: undefined
            Dynamic power: 
               Binary Op -
                  LHS
                     Ident: wmTDP
                  RHS
                     Ident: wmIdle
         Resource 'stores' (arg=numBytes) quantity=
            Binary Op +
               LHS
                  Ident: ddr3Lat
               RHS
                  Binary Op /
                     LHS
                        Ident: numBytes
                     RHS
                        Ident: ddr3BW
            Trait 'stride': quantity=
                  Binary Op *
                     LHS
                        Ident: base
                     RHS
                        Int: 2
            Trait 'random': quantity=
                  Binary Op *
                     LHS
                        Ident: base
                     RHS
                        Int: 8
            Static power: undefined
            Dynamic power: 
               Binary Op -
                  LHS
                     Ident: wmTDP
                  RHS
                     Ident: wmIdle
         Conflict: loads,stores
      Interconnect 'qdrInfiniband':
         Resource 'messages' (arg=msgsize) quantity=
            Binary Op +
               LHS
                  Ident: qdrLatency
               RHS
                  Binary Op /
                     LHS
                        Ident: msgsize
                     RHS
                        Ident: qdrBW
            Trait 'separate' (arg=nMessages): quantity=
                  Binary Op *
                     LHS
                        Ident: nMessages
                     RHS
                        Ident: base
            Static power: undefined
            Dynamic power: undefined
      Socket 'intel_xeon_x5660'
         Cores: type=westmereCore' quantity=
            Ident: wmNumCores
         Memory: type=ddr3
         Cache: type=wmCache private=false
         Link: type=qpi
         Static power: 
            Ident: wmIdle
         Dynamic power: undefined
      Core 'westmereCore':
         Resource 'flops' (arg=number) quantity=
            Binary Op /
               LHS
                  Ident: number
               RHS
                  Ident: wmIssueRate
            Trait 'dp': quantity=
                  Binary Op *
                     LHS
                        Ident: base
                     RHS
                        Int: 2
            Trait 'simd': quantity=
                  Binary Op /
                     LHS
                        Ident: base
                     RHS
                        Ident: wmSIMD
            Trait 'fmad': quantity=
                  Ident: base
            Trait 'sin': quantity=
                  Binary Op *
                     LHS
                        Ident: base
                     RHS
                        Int: 18
            Static power: undefined
            Dynamic power: 
               Binary Op /
                  LHS
                     Binary Op -
                        LHS
                           Ident: wmTDP
                        RHS
                           Ident: wmIdle
                  RHS
                     Ident: wmNumCores
         Resource 'intops' (arg=number) quantity=
            Binary Op /
               LHS
                  Ident: number
               RHS
                  Ident: wmIssueRate
            Traits: none
            Static power: undefined
            Dynamic power: 
               Binary Op /
                  LHS
                     Binary Op -
                        LHS
                           Ident: wmTDP
                        RHS
                           Ident: wmIdle
                  RHS
                     Ident: wmNumCores
      Cache 'wmCache':
         Property 'capacity'=
            Ident: wmCacheCap
      Link 'qpi':
         Resource 'intracomm' (arg=bytes) quantity=
            Binary Op +
               LHS
                  Real: 1e-06
               RHS
                  Binary Op /
                     LHS
                        Ident: bytes
                     RHS
                        Binary Op *
                           LHS
                              Real: 12.5
                           RHS
                              Real: 1e+09
            Traits: none
            Static power: undefined
            Dynamic power: undefined
      Socket 'nvidia_m2090'
         Cores: type=fermiCore' quantity=
            Ident: fNumCores
         Memory: type=gddr5
         Cache: type=fermiSP private=true
         Link: type=pcie
         Static power: 
            Ident: fIdle
         Dynamic power: undefined
      Core 'fermiCore':
         Resource 'flops' (arg=number) quantity=
            Binary Op /
               LHS
                  Ident: number
               RHS
                  Ident: fCoreClock
            Trait 'dp': quantity=
                  Binary Op *
                     LHS
                        Ident: base
                     RHS
                        Int: 2
            Trait 'simd': quantity=
                  Binary Op /
                     LHS
                        Ident: base
                     RHS
                        Ident: fSIMD
            Trait 'fmad': quantity=
                  Binary Op /
                     LHS
                        Ident: base
                     RHS
                        Int: 2
            Trait 'sin': quantity=
                  Binary Op *
                     LHS
                        Ident: base
                     RHS
                        Int: 18
            Static power: undefined
            Dynamic power: 
               Binary Op /
                  LHS
                     Binary Op -
                        LHS
                           Ident: fTDP
                        RHS
                           Ident: fIdle
                  RHS
                     Ident: fNumCores
      Memory 'gddr5':
         Property 'capacity'=
            Ident: gddr5Cap
         Resource 'loads' (arg=numBytes) quantity=
            Binary Op +
               LHS
                  Ident: gddr5Lat
               RHS
                  Binary Op /
                     LHS
                        Ident: numBytes
                     RHS
                        Ident: gddr5BW
            Trait 'stride': quantity=
                  Binary Op *
                     LHS
                        Ident: base
                     RHS
                        Int: 2
            Trait 'random': quantity=
                  Binary Op *
                     LHS
                        Ident: base
                     RHS
                        Int: 8
            Static power: undefined
            Dynamic power: 
               Binary Op -
                  LHS
                     Ident: fTDP
                  RHS
                     Ident: fIdle
         Resource 'stores' (arg=numBytes) quantity=
            Binary Op +
               LHS
                  Ident: gddr5Lat
               RHS
                  Binary Op /
                     LHS
                        Ident: numBytes
                     RHS
                        Ident: gddr5BW
            Trait 'stride': quantity=
                  Binary Op *
                     LHS
                        Ident: base
                     RHS
                        Int: 2
            Trait 'random': quantity=
                  Binary Op *
                     LHS
                        Ident: base
                     RHS
                        Int: 8
            Static power: undefined
            Dynamic power: 
               Binary Op -
                  LHS
                     Ident: fTDP
                  RHS
                     Ident: fIdle
         Conflict: loads,stores
         Conflict: loads,flops
      Cache 'fermiSP':
         Property 'capacity'=
            Binary Op *
               LHS
                  Int: 48
               RHS
                  Real: 1000
         Property 'latency'=
            Int: 0
         Property 'bandwidth'=
            Binary Op /
               LHS
                  Binary Op *
                     LHS
                        Int: 1177
                     RHS
                        Real: 1e+09
               RHS
                  Int: 16
      Link 'pcie':
         Resource 'intracomm' (arg=bytes) quantity=
            Binary Op +
               LHS
                  Ident: pcieLat
               RHS
                  Binary Op /
                     LHS
                        Ident: bytes
                     RHS
                        Ident: pcieBW
            Traits: none
            Static power: undefined
            Dynamic power: undefined
      Machine 'Keeneland'
         Nodes: type='sl390' quantity=
            Ident: klNodes
         Interconnect: type=qdrInfiniband
            As fatTree
         Resource 'bbw' (arg=msgVolume) quantity=
            Binary Op /
               LHS
                  Ident: msgVolume
               RHS
                  Ident: bisectionBW
            Traits: none
            Static power: undefined
            Dynamic power: 
               Binary Op *
                  LHS
                     Ident: msgVolume
                  RHS
                     Ident: klJoulesPerByte
      Node 'sl390'
         Socket type='intel_xeon_x5660' quantity=
            Int: 2
         Socket type='nvidia_m2090' quantity=
            Int: 3
----- Main Application Model -----
App model fft1d:
   Globals:
      Identifier n = 
         Int: 8192
      Identifier wordSize = 
         Int: 16
      Identifier a = 
         Real: 6.3
      Identifier P = 
         Int: 16
      Identifier Z = 
         Binary Op *
            LHS
               Real: 2.1
            RHS
               Real: 1e+06
      Data fftVolume:
         Quantity:
            Binary Op *
               LHS
                  Ident: n
               RHS
                  Ident: wordSize
   Kernels:
      Kernel fft:
         Statements:
            Execution Block (control node '100')
               Parallelism:
                  Ident: P
               Requires flops of quantity: 
                  Binary Op *
                     LHS
                        Binary Op *
                           LHS
                              Int: 5
                           RHS
                              Binary Op /
                                 LHS
                                    Ident: n
                                 RHS
                                    Ident: P
                     RHS
                        Call log2 with 1 args:
                           Binary Op /
                              LHS
                                 Ident: n
                              RHS
                                 Ident: P
                  As dp
                  As simd
                  As fmad
               Requires loads of quantity: 
                  Binary Op *
                     LHS
                        Binary Op *
                           LHS
                              Binary Op *
                                 LHS
                                    Binary Op /
                                       LHS
                                          Ident: n
                                       RHS
                                          Ident: P
                                 RHS
                                    Ident: wordSize
                           RHS
                              Ident: a
                     RHS
                        Call max with 2 args:
                           Int: 1
                           Binary Op /
                              LHS
                                 Call log with 1 args:
                                    Binary Op *
                                       LHS
                                          Binary Op /
                                             LHS
                                                Ident: n
                                             RHS
                                                Ident: P
                                       RHS
                                          Ident: wordSize
                              RHS
                                 Call log with 1 args:
                                    Ident: Z
                  To/From: fftVolume
      Kernel main:
         Statements:
            Control node '101': kernel call fft

-----------------------------------------------------


 ------  Application Analysis ------
>> Basic control flow expression
flops    = fft

>> Raw expression without variable expansion:
flops    = P*((5*(n / P))*(log(n / P)/log(2)))
messages = 0
loads    = P*((((n / P)*wordSize)*a)*max(1, (log((n / P)*wordSize)) / (log(Z))))
stores   = 0

>> Raw expression with variable expansion:
flops    = 16*((5*(8192 / 16))*(log(8192 / 16)/log(2)))
messages = 0
loads    = 16*((((8192 / 16)*16)*6.3)*max(1, (log((8192 / 16)*16)) / (log(2.1*1e+06))))
stores   = 0

>> as values, With parameters using default values
flops    = 368640
messages = 0
loads    = 825754
stores   = 0

>> Simplification test:
flops (noexp)       = P*((5*(n / P))*(log(n / P)/log(2)))
flops (noexp,simpl) = (P * 5 * (n / P) * ((log(n / P)/log(2))))
flops (exp)         = 16*((5*(8192 / 16))*(log(8192 / 16)/log(2)))
flops (exp,simpl)   = 368640

There are 0 parameters with ranges.



>> Kernel fft

Raw flops for kernel 'fft' = 368640
Raw loads for kernel 'fft' = 825754
Raw stores for kernel 'fft' = 0

Exclusive set size is n*wordSize
Inclusive set size is n*wordSize

Calculating flops/byte intensity for kernel 'fft':
  = (P*((5*(n / P))*(log(n / P)/log(2)))) / (P*((((n / P)*wordSize)*a)*max(1, (log((n / P)*wordSize)) / (log(Z)))))
  expanding, but in terms of x:
  = (16*((5*(8192 / 16))*(log(8192 / 16)/log(2)))) / (16*((((8192 / 16)*16)*6.3)*max(1, (log((8192 / 16)*16)) / (log(2.1*1e+06)))))


>> Kernel main

Raw flops for kernel 'main' = 368640
Raw loads for kernel 'main' = 825754
Raw stores for kernel 'main' = 0

Exclusive set size is 0
Inclusive set size is n*wordSize

Calculating flops/byte intensity for kernel 'main':
  = (P*((5*(n / P))*(log(n / P)/log(2)))) / (P*((((n / P)*wordSize)*a)*max(1, (log((n / P)*wordSize)) / (log(Z)))))
  expanding, but in terms of x:
  = (16*((5*(8192 / 16))*(log(8192 / 16)/log(2)))) / (16*((((8192 / 16)*16)*6.3)*max(1, (log((8192 / 16)*16)) / (log(2.1*1e+06)))))

 ------  Machine Analysis ------


>> for socket type 'nvidia_m2090' <<
  totalcores = klNodes*(fNumCores*3)
  totalcores = 5760

  peak sp gflops: 7488
  peak sp/simd gflops: 239616
  peak sp/simd/fmad gflops: 479232
  peak dp gflops: 3744
  peak dp/simd gflops: 119808
  peak dp/simd/fmad gflops: 239616
  ...
  peak bw in GB/sec: 47952


>> testing expressions
  time to process 1e9 sp flops in sec: (((1e+09 / fCoreClock) / fNumCores) / 3) / klNodes
  time to process 1e9 sp flops in sec (expanded): (((1e+09 / (1300*1e+06)) / 16) / 3) / 120
  time to process 1e9 sp/simd flops in sec: ((((1e+09 / fCoreClock) / fSIMD) / fNumCores) / 3) / klNodes
  time to process 1e9 sp/simd flops in sec (expanded): ((((1e+09 / (1300*1e+06)) / 32) / 16) / 3) / 120
  time to read 1e9 bytes in sec: ((gddr5Lat + 1e+09 / gddr5BW) / 3) / klNodes
  time to read 1e9 bytes in sec (expanded): (((50*1e-09) / 32 + 1e+09 / (((3700*1e+06)*48)*0.75)) / 3) / 120


>> for socket type 'intel_xeon_x5660' <<
  totalcores = klNodes*(wmNumCores*2)
  totalcores = 1440

  peak sp gflops: 8064
  peak sp/simd gflops: 32256
  peak sp/simd/fmad gflops: 32256
  peak dp gflops: 4032
  peak dp/simd gflops: 16128
  peak dp/simd/fmad gflops: 16128
  ...
  peak bw in GB/sec: 6140.16


>> testing expressions
  time to process 1e9 sp flops in sec: (((1e+09 / wmIssueRate) / wmNumCores) / 2) / klNodes
  time to process 1e9 sp flops in sec (expanded): (((1e+09 / ((2.8*1e+09)*2)) / 6) / 2) / 120
  time to process 1e9 sp/simd flops in sec: ((((1e+09 / wmIssueRate) / wmSIMD) / wmNumCores) / 2) / klNodes
  time to process 1e9 sp/simd flops in sec (expanded): ((((1e+09 / ((2.8*1e+09)*2)) / 4) / 6) / 2) / 120
  time to read 1e9 bytes in sec: ((ddr3Lat + 1e+09 / ddr3BW) / 2) / klNodes
  time to read 1e9 bytes in sec (expanded): (((10*1e-09) / 4 + 1e+09 / (((1066*1e+06)*3)*8)) / 2) / 120

 ------  Combined Analysis ------


++Predicting runtime on kernel 'fft' for socket type nvidia_m2090
run time (expression) = ceil(P / (klNodes*(fNumCores*3)))*((((((5*(n / P))*(log(n / P)/log(2))) / fCoreClock)*2) / fSIMD) / 2 + (gddr5Lat + ((((n / P)*wordSize)*a)*max(1, (log((n / P)*wordSize)) / (log(Z)))) / gddr5BW)*fNumCores)
run time (value)      = 6.7782e-06
app model data transfer time = ((pcieLat + (n*wordSize) / pcieBW) / 3) / klNodes
flops dynamic power (J) = P*(((((((5*(n / P))*(log(n / P)/log(2))) / fCoreClock)*2) / fSIMD) / 2)*((fTDP - fIdle) / fNumCores))
flops dynamic power (J) = P*(((((((5*(n / P))*(log(n / P)/log(2))) / (1300*1e+06))*2) / 32) / 2)*((250 - 30) / 16))
loads dynamic power (J) = P*(((gddr5Lat + ((((n / P)*wordSize)*a)*max(1, (log((n / P)*wordSize)) / (log(Z)))) / gddr5BW)*fNumCores)*(fTDP - fIdle))
loads dynamic power (J) = P*((((50*1e-09) / 32 + ((((n / P)*wordSize)*a)*max(1, (log((n / P)*wordSize)) / (log(Z)))) / (((3700*1e+06)*48)*0.75))*16)*(250 - 30))
stores dynamic power (J) = 0
stores dynamic power (J) = 0


++Predicting runtime on kernel 'main' for socket type nvidia_m2090
run time (expression) = ceil(P / (klNodes*(fNumCores*3)))*((((((5*(n / P))*(log(n / P)/log(2))) / fCoreClock)*2) / fSIMD) / 2 + (gddr5Lat + ((((n / P)*wordSize)*a)*max(1, (log((n / P)*wordSize)) / (log(Z)))) / gddr5BW)*fNumCores)
run time (value)      = 6.7782e-06
app model data transfer time = ((pcieLat + (n*wordSize) / pcieBW) / 3) / klNodes
flops dynamic power (J) = 0
flops dynamic power (J) = 0
loads dynamic power (J) = 0
loads dynamic power (J) = 0
stores dynamic power (J) = 0
stores dynamic power (J) = 0


++Predicting runtime on kernel 'fft' for socket type intel_xeon_x5660
run time (expression) = ceil(P / (klNodes*(wmNumCores*2)))*max(((((5*(n / P))*(log(n / P)/log(2))) / wmIssueRate)*2) / wmSIMD, (ddr3Lat + ((((n / P)*wordSize)*a)*max(1, (log((n / P)*wordSize)) / (log(Z)))) / ddr3BW)*wmNumCores)
run time (value)      = 1.21186e-05
app model data transfer time = ((1e-06 + (n*wordSize) / (12.5*1e+09)) / 2) / klNodes
flops dynamic power (J) = P*((((((5*(n / P))*(log(n / P)/log(2))) / wmIssueRate)*2) / wmSIMD)*((wmTDP - wmIdle) / wmNumCores))
flops dynamic power (J) = P*((((((5*(n / P))*(log(n / P)/log(2))) / ((2.8*1e+09)*2))*2) / 4)*((90 - 10) / 6))
loads dynamic power (J) = P*(((ddr3Lat + ((((n / P)*wordSize)*a)*max(1, (log((n / P)*wordSize)) / (log(Z)))) / ddr3BW)*wmNumCores)*(wmTDP - wmIdle))
loads dynamic power (J) = P*((((10*1e-09) / 4 + ((((n / P)*wordSize)*a)*max(1, (log((n / P)*wordSize)) / (log(Z)))) / (((1066*1e+06)*3)*8))*6)*(90 - 10))
stores dynamic power (J) = 0
stores dynamic power (J) = 0


++Predicting runtime on kernel 'main' for socket type intel_xeon_x5660
run time (expression) = ceil(P / (klNodes*(wmNumCores*2)))*max(((((5*(n / P))*(log(n / P)/log(2))) / wmIssueRate)*2) / wmSIMD, (ddr3Lat + ((((n / P)*wordSize)*a)*max(1, (log((n / P)*wordSize)) / (log(Z)))) / ddr3BW)*wmNumCores)
run time (value)      = 1.21186e-05
app model data transfer time = ((1e-06 + (n*wordSize) / (12.5*1e+09)) / 2) / klNodes
flops dynamic power (J) = 0
flops dynamic power (J) = 0
loads dynamic power (J) = 0
loads dynamic power (J) = 0
stores dynamic power (J) = 0
stores dynamic power (J) = 0
